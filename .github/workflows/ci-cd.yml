name: CI/CD to ECS Fargate

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: public.ecr.aws/m9g6f1m3/fintrax
  ECS_CLUSTER: fintr-cluster

jobs:
  source:
    name: Source Stage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  scan:
    name: Code Scanning Stage
    runs-on: ubuntu-latest
    needs: source
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy (source scan only)
        uses: aquasecurity/trivy-action@0.19.0
        with:
          scan-type: fs
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table

  build:
    name: Build Stage
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build app
        run: npm run build


  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage

  deploy:
    name: Deploy Stage
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        run: echo "No ECR login needed for public repo"

      - name: Set environment & tag
        id: set-env
        run: |
          case "${GITHUB_REF_NAME}" in
            main)    echo "tag=latest"  >> $GITHUB_OUTPUT; echo "env=prod"    >> $GITHUB_OUTPUT ;;
            develop) echo "tag=develop" >> $GITHUB_OUTPUT; echo "env=dev"     >> $GITHUB_OUTPUT ;;
            staging) echo "tag=staging" >> $GITHUB_OUTPUT; echo "env=staging" >> $GITHUB_OUTPUT ;;
          esac

      - name: Build, tag, and push Docker image to Public ECR
        env:
          TAG: ${{ steps.set-env.outputs.tag }}
        run: |
          IMAGE_URI="$ECR_REPOSITORY:$TAG"
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Update ECS Service with new image
        env:
          ENVIRONMENT: ${{ steps.set-env.outputs.env }}
          IMAGE_URI: ${{ env.IMAGE_URI }}
        run: |
          SERVICE_NAME="fintr-$ENVIRONMENT-svc"

          # Get current task definition
          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $SERVICE_NAME \
            --query "services[0].taskDefinition" \
            --output text)

          # Get task definition JSON
          aws ecs describe-task-definition \
            --task-definition "$TASK_DEF_ARN" \
            --query taskDefinition > taskdef.json

          # Remove unnecessary fields
          jq 'del(.status,.revision,.taskDefinitionArn,.requiresAttributes,.compatibilities,.registeredAt,.registeredBy)' taskdef.json > taskdef-stripped.json

          # Update image
          jq --arg IMG "$IMAGE_URI" '.containerDefinitions[0].image=$IMG' taskdef-stripped.json > new-taskdef.json

          # Register new task definition revision
          NEW_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://new-taskdef.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          # Update ECS service to new task definition
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $SERVICE_NAME \
            --task-definition "$NEW_REVISION" \
            --force-new-deployment

          echo "âœ… Deployed $IMAGE_URI to $SERVICE_NAME"
