name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: public.ecr.aws/m9g6f1m3/fintrax

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./fintrax-app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'fintrax-app/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for testing
        run: |
          echo "Creating .env for testing..."
          cat > .env.local << EOF
          # Application Configuration
          NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
          
          # Database Configuration
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          
          # Clerk Authentication Configuration
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
          
          # Environment-specific configuration
          NODE_ENV=development
          NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
          NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
          EOF
          echo "âœ… .env created for testing"

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run build

      - name: Run tests (if available)
        run: |
          if npm run | grep -q "test"; then
            npm test
          else
            echo "No tests configured"
          fi

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    defaults:
      run:
        working-directory: fintrax-app

    outputs:
      image-uri: ${{ steps.build-image.outputs.image-uri }}
      environment: ${{ steps.set-env.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Create .env file
        run: |
          echo "Creating .env for CI/CD build..."
          cat > .env.local << EOF
          # Application Configuration
          NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
          
          # Database Configuration
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          
          # Clerk Authentication Configuration
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
          
          # Environment-specific configuration
          NODE_ENV=development
          NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
          NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
          EOF
          echo "âœ… .env created successfully"

      - name: Set environment and image tag
        id: set-env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
            echo "tag=develop" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == 'refs/heads/staging' ]]; then
            echo "tag=staging" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ steps.set-env.outputs.tag }}
        run: |
          # Build and push Docker image to existing ECR registry with build args
          IMAGE_URI=$ECR_REPOSITORY:$IMAGE_TAG
          docker build -f Dockerfile -t $IMAGE_URI \
            --build-arg NEXT_PUBLIC_APP_URL="${{ secrets.NEXT_PUBLIC_APP_URL }}" \
            --build-arg NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" \
            --build-arg NEXT_PUBLIC_CLERK_SIGN_IN_URL="/sign-in" \
            --build-arg NEXT_PUBLIC_CLERK_SIGN_UP_URL="/sign-up" \
            --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --build-arg CLERK_SECRET_KEY="${{ secrets.CLERK_SECRET_KEY }}" \
            --build-arg CLERK_PUBLISHABLE_KEY="${{ secrets.CLERK_PUBLISHABLE_KEY }}" \
            .
          docker push $IMAGE_URI
          
          echo "Image pushed to $IMAGE_URI"
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to existing ECS service
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    env:
      # ðŸ”§ set these to your real names (no need for per-env if you run one service)
      ECS_CLUSTER: fintrax
      ECS_SERVICE: fintrax-dev-svc
      CONTAINER_NAME: fintrax

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Determine image to deploy (prefer unique tag)
        id: image
        run: |
          echo "uri=${{ needs.build-and-push.outputs.image-uri }}" >> $GITHUB_OUTPUT
          echo "digest=${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_OUTPUT

      - name: Fetch current task definition ARN
        id: current-td
        run: |
          TD_ARN=$(aws ecs describe-services \
            --cluster "${ECS_CLUSTER}" \
            --services "${ECS_SERVICE}" \
            --query 'services[0].taskDefinition' --output text)
          echo "arn=$TD_ARN" >> $GITHUB_OUTPUT

      - name: Download and rewrite task definition with new image
        env:
          TD_ARN: ${{ steps.current-td.outputs.arn }}
          IMAGE_URI: ${{ steps.image.outputs.uri }}
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
        run: |
          aws ecs describe-task-definition --task-definition "$TD_ARN" > td.json

          # strip read-only fields and swap the image on target container
          jq '
            .taskDefinition
            | del(
                .taskDefinitionArn,
                .revision,
                .status,
                .requiresAttributes,
                .registeredAt,
                .registeredBy,
                .deregisteredAt,
                .compatibilities,
                .inferenceAccelerators?,
                .pidMode?, .ipcMode?
              )
            | .containerDefinitions |=
                (map(if .name == env.CONTAINER_NAME
                     then .image = env.IMAGE_URI
                     else . end))
          ' td.json > new-td.json

          echo "Preview:"
          jq '.family, (.containerDefinitions[] | {name,image})' new-td.json

      - name: Register new task definition revision
        id: register
        run: |
          OUT=$(aws ecs register-task-definition --cli-input-json file://new-td.json)
          NEW_TD_ARN=$(echo "$OUT" | jq -r '.taskDefinition.taskDefinitionArn')
          echo "arn=$NEW_TD_ARN" >> $GITHUB_OUTPUT

      - name: Update service and force new deployment
        run: |
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${{ steps.register.outputs.arn }}" \
            --force-new-deployment

      - name: Summarize
        run: |
          echo "### ðŸš€ ECS Deployment Triggered" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster:** ${ECS_CLUSTER}" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${ECS_SERVICE}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ steps.image.outputs.uri }}" >> $GITHUB_STEP_SUMMARY
